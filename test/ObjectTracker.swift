//
//  ObjectTracker.swift
//  test
//
//  Created by Samy üìç on 20/06/2025.
//  Object tracking system with color persistence
//  Updated with importance system support - 21/06/2025
//

import Foundation
import UIKit

struct TrackedObject {
    let id: UUID                    // ID unique
    let trackingNumber: Int         // Num√©ro d'affichage (1, 2, 3...)
    var lastSeen: Date             // Timestamp derni√®re d√©tection
    let color: UIColor             // Couleur assign√©e (persistante)
    var label: String              // Type d'objet (person, car, etc.)
    var lastPosition: CGPoint      // Derni√®re position (centre)
    var lastRect: CGRect           // Derni√®re bounding box
    var confidence: Float          // Derni√®re confiance
    var distance: Float?           // Derni√®re distance LiDAR
    var framesNotSeen: Int         // Compteur frames perdues
    var isActive: Bool             // Actuellement d√©tect√© ou en m√©moire
    var detectionHistory: [Date]   // Historique pour analyse de stabilit√©
    let firstDetectionTime: Date   // Premi√®re fois que l'objet a √©t√© d√©tect√©
    
    // Calculer l'opacit√© selon l'√©tat
    var opacity: Double {
        return isActive ? 1.0 : 0.3
    }
    
    // Calculer la dur√©e de vie de l'objet (depuis premi√®re d√©tection)
    var lifetime: TimeInterval {
        return lastSeen.timeIntervalSince(firstDetectionTime)
    }
    
    // V√©rifier si l'objet est expir√©
    func isExpired(timeout: TimeInterval) -> Bool {
        return Date().timeIntervalSince(lastSeen) > timeout
    }
    
    // V√©rifier si l'objet m√©rite d'√™tre gard√© en m√©moire
    func shouldKeepInMemory(minimumLifetime: TimeInterval = 2.0) -> Bool {
        return lifetime >= minimumLifetime
    }
}

class ObjectTracker: ObservableObject {
    // Configuration
    private let proximityThreshold: CGFloat = 0.15      // 15% de la largeur d'√©cran
    private let maxFramesLost = 10                      // ~0.5s √† 20fps
    private let memoryTimeout: TimeInterval = 3.0       // 3 secondes
    private let minimumLifetimeForMemory: TimeInterval = 2.0  // 2 secondes minimum pour √™tre gard√© en m√©moire
    private let maxTrackedObjects = 20                  // Performance
    
    // Palette de couleurs pr√©d√©finie
    private let colorPalette: [UIColor] = [
        .systemRed, .systemBlue, .systemGreen, .systemOrange, .systemPurple, .systemPink,
        .systemYellow, .systemTeal, .systemMint, .systemIndigo, .systemBrown,
        UIColor(red: 0.8, green: 0.2, blue: 0.6, alpha: 1.0),     // Magenta
        UIColor(red: 0.2, green: 0.8, blue: 0.4, alpha: 1.0),     // Vert lime
        UIColor(red: 0.9, green: 0.6, blue: 0.1, alpha: 1.0),     // Orange fonc√©
        UIColor(red: 0.3, green: 0.3, blue: 0.9, alpha: 1.0),     // Bleu roi
        UIColor(red: 0.7, green: 0.9, blue: 0.2, alpha: 1.0),     // Jaune-vert
        UIColor(red: 0.9, green: 0.3, blue: 0.3, alpha: 1.0),     // Rouge corail
        UIColor(red: 0.4, green: 0.8, blue: 0.8, alpha: 1.0),     // Turquoise
        UIColor(red: 0.8, green: 0.4, blue: 0.9, alpha: 1.0)      // Violet clair
    ]
    
    // √âtat du tracker
    @Published private var trackedObjects: [TrackedObject] = []
    private var nextTrackingNumber = 1
    private var colorIndex = 0
    
    // Statistiques
    private var totalObjectsTracked = 0
    private var activeTrackingSessions = 0
    
    init() {
        print("üéØ ObjectTracker initialis√© avec crit√®re de dur√©e de vie intelligente")
        print("   - Dur√©e min. pour m√©moire: \(minimumLifetimeForMemory)s")
        print("   - Objets < \(minimumLifetimeForMemory)s ‚Üí suppression directe")
        print("   - Objets ‚â• \(minimumLifetimeForMemory)s ‚Üí m√©moire \(memoryTimeout)s")
    }
    
    // MARK: - Interface publique
    
    /// Point d'entr√©e principal : traiter une nouvelle frame de d√©tections
    func processDetections(_ detections: [(rect: CGRect, label: String, confidence: Float, distance: Float?)])
    -> [(rect: CGRect, label: String, confidence: Float, distance: Float?, trackingInfo: (id: Int, color: UIColor, opacity: Double))] {
        
        let frameStartTime = Date()
        
        // Phase 1: MATCHING - Associer d√©tections aux objets existants
        let (matchedObjects, newDetections) = matchDetectionsToObjects(detections)
        
        // Phase 2: UPDATE - Mettre √† jour objets match√©s et cr√©er nouveaux objets
        updateMatchedObjects(matchedObjects)
        createNewObjects(newDetections, frameTime: frameStartTime)
        
        // Phase 3: CLEANUP - G√©rer objets perdus et expir√©s
        cleanupLostObjects(frameTime: frameStartTime)
        
        // Retourner les d√©tections enrichies avec infos de tracking
        return generateEnrichedDetections()
    }
    
    /// R√©initialiser le tracker
    func reset() {
        trackedObjects.removeAll()
        nextTrackingNumber = 1
        colorIndex = 0
        totalObjectsTracked = 0
        activeTrackingSessions = 0
        shortTermObjects = 0
        longTermObjects = 0
        print("üîÑ ObjectTracker r√©initialis√© avec crit√®re de dur√©e de vie")
    }
    
    /// Obtenir tous les objets track√©s (pour le syst√®me d'importance)
    func getAllTrackedObjects() -> [TrackedObject] {
        return trackedObjects
    }
    
    /// Obtenir seulement les objets actifs
    func getActiveTrackedObjects() -> [TrackedObject] {
        return trackedObjects.filter { $0.isActive }
    }
    
    /// Obtenir seulement les objets en m√©moire
    func getMemoryTrackedObjects() -> [TrackedObject] {
        return trackedObjects.filter { !$0.isActive }
    }
    
    /// Obtenir un objet sp√©cifique par son ID de tracking
    func getTrackedObject(by trackingNumber: Int) -> TrackedObject? {
        return trackedObjects.first { $0.trackingNumber == trackingNumber }
    }
    
    /// Obtenir le nombre total d'objets track√©s
    func getTrackedObjectCount() -> (active: Int, memory: Int, total: Int) {
        let active = trackedObjects.filter { $0.isActive }.count
        let memory = trackedObjects.filter { !$0.isActive }.count
        return (active: active, memory: memory, total: trackedObjects.count)
    }
    
    /// Obtenir les statistiques du tracker
    func getTrackingStats() -> String {
        let activeCount = trackedObjects.filter { $0.isActive }.count
        let memoryCount = trackedObjects.filter { !$0.isActive }.count
        
        var stats = "üéØ Statistiques de tracking:\n"
        stats += "   - Objets actifs: \(activeCount)\n"
        stats += "   - Objets en m√©moire: \(memoryCount)\n"
        stats += "   - Total track√©s: \(totalObjectsTracked)\n"
        stats += "   - Sessions actives: \(activeTrackingSessions)\n"
        stats += "   - Timeout m√©moire: \(String(format: "%.1f", memoryTimeout))s\n"
        stats += "   - Dur√©e min. pour m√©moire: \(String(format: "%.1f", minimumLifetimeForMemory))s\n"
        stats += "   - Seuil proximit√©: \(String(format: "%.0f", proximityThreshold * 100))%"
        
        return stats
    }
    
    // MARK: - Phase 1: MATCHING
    
    private func matchDetectionsToObjects(_ detections: [(rect: CGRect, label: String, confidence: Float, distance: Float?)])
    -> (matched: [(TrackedObject, (rect: CGRect, label: String, confidence: Float, distance: Float?))], unmatched: [(rect: CGRect, label: String, confidence: Float, distance: Float?)]) {
        
        var matchedPairs: [(TrackedObject, (rect: CGRect, label: String, confidence: Float, distance: Float?))] = []
        var unmatchedDetections = detections
        var usedObjectIndices: Set<Int> = []
        
        // Pour chaque d√©tection, chercher le meilleur match
        for (detectionIndex, detection) in detections.enumerated() {
            var bestMatch: (objectIndex: Int, score: Double)? = nil
            
            // Chercher parmi les objets de m√™me classe
            for (objectIndex, trackedObject) in trackedObjects.enumerated() {
                guard !usedObjectIndices.contains(objectIndex) else { continue }
                guard trackedObject.label.lowercased() == detection.label.lowercased() else { continue }
                
                // Calculer le score de matching (proximit√©)
                let score = calculateMatchingScore(detection: detection, trackedObject: trackedObject)
                
                // Garder le meilleur score si sup√©rieur au seuil
                if score > Double(proximityThreshold) {
                    if bestMatch == nil || score > bestMatch!.score {
                        bestMatch = (objectIndex, score)
                    }
                }
            }
            
            // Si un match a √©t√© trouv√©
            if let match = bestMatch {
                let trackedObject = trackedObjects[match.objectIndex]
                matchedPairs.append((trackedObject, detection))
                usedObjectIndices.insert(match.objectIndex)
                
                // Retirer de la liste des non-match√©s
                if let index = unmatchedDetections.firstIndex(where: {
                    $0.rect == detection.rect && $0.label == detection.label
                }) {
                    unmatchedDetections.remove(at: index)
                }
            }
        }
        
        return (matchedPairs, unmatchedDetections)
    }
    
    private func calculateMatchingScore(detection: (rect: CGRect, label: String, confidence: Float, distance: Float?), trackedObject: TrackedObject) -> Double {
        // Calculer les centres des bounding boxes
        let detectionCenter = CGPoint(
            x: detection.rect.midX,
            y: detection.rect.midY
        )
        
        let trackedCenter = trackedObject.lastPosition
        
        // Distance euclidienne normalis√©e
        let distance = sqrt(pow(detectionCenter.x - trackedCenter.x, 2) + pow(detectionCenter.y - trackedCenter.y, 2))
        
        // Convertir en score (plus la distance est petite, plus le score est √©lev√©)
        let normalizedDistance = distance / proximityThreshold
        let score = max(0.0, 1.0 - Double(normalizedDistance))
        
        return score
    }
    
    // MARK: - Phase 2: UPDATE
    
    private func updateMatchedObjects(_ matchedPairs: [(TrackedObject, (rect: CGRect, label: String, confidence: Float, distance: Float?))]) {
        for (trackedObject, detection) in matchedPairs {
            if let index = trackedObjects.firstIndex(where: { $0.id == trackedObject.id }) {
                // Mettre √† jour l'objet existant
                trackedObjects[index].lastSeen = Date()
                trackedObjects[index].lastPosition = CGPoint(x: detection.rect.midX, y: detection.rect.midY)
                trackedObjects[index].lastRect = detection.rect
                trackedObjects[index].confidence = detection.confidence
                trackedObjects[index].distance = detection.distance
                trackedObjects[index].framesNotSeen = 0
                trackedObjects[index].isActive = true
                trackedObjects[index].detectionHistory.append(Date())
                
                // Limiter l'historique pour la performance
                if trackedObjects[index].detectionHistory.count > 30 {
                    trackedObjects[index].detectionHistory.removeFirst()
                }
            }
        }
    }
    
    private func createNewObjects(_ newDetections: [(rect: CGRect, label: String, confidence: Float, distance: Float?)], frameTime: Date) {
        // V√©rifier la limite d'objets
        let currentObjectCount = trackedObjects.count
        let newObjectsToCreate = min(newDetections.count, maxTrackedObjects - currentObjectCount)
        
        for i in 0..<newObjectsToCreate {
            let detection = newDetections[i]
            
            let newObject = TrackedObject(
                id: UUID(),
                trackingNumber: nextTrackingNumber,
                lastSeen: frameTime,
                color: getNextColor(),
                label: detection.label,
                lastPosition: CGPoint(x: detection.rect.midX, y: detection.rect.midY),
                lastRect: detection.rect,
                confidence: detection.confidence,
                distance: detection.distance,
                framesNotSeen: 0,
                isActive: true,
                detectionHistory: [frameTime],
                firstDetectionTime: frameTime  // Enregistrer le moment de premi√®re d√©tection
            )
            
            trackedObjects.append(newObject)
            nextTrackingNumber += 1
            totalObjectsTracked += 1
            activeTrackingSessions += 1
            
            print("‚ú® Nouvel objet track√© #\(newObject.trackingNumber): \(detection.label) (couleur: \(getColorName(newObject.color)))")
        }
        
        if newDetections.count > newObjectsToCreate {
            print("‚ö†Ô∏è Limite d'objets atteinte (\(maxTrackedObjects)), \(newDetections.count - newObjectsToCreate) d√©tections ignor√©es")
        }
    }
    
    // MARK: - Phase 3: CLEANUP avec crit√®re de dur√©e de vie
    
    private func cleanupLostObjects(frameTime: Date) {
        var objectsToRemove: [UUID] = []
        
        for (index, trackedObject) in trackedObjects.enumerated() {
            // V√©rifier si l'objet n'a pas √©t√© match√© dans cette frame
            if trackedObject.lastSeen < frameTime {
                trackedObjects[index].framesNotSeen += 1
                
                // Marquer comme inactif si trop de frames perdues
                if trackedObjects[index].framesNotSeen >= maxFramesLost {
                    trackedObjects[index].isActive = false
                    
                    // NOUVELLE LOGIQUE : V√©rifier si l'objet m√©rite d'√™tre gard√© en m√©moire
                    if !trackedObject.shouldKeepInMemory(minimumLifetime: minimumLifetimeForMemory) {
                        // Objet d√©tect√© < 2 secondes ‚Üí Suppression directe
                        objectsToRemove.append(trackedObject.id)
                        activeTrackingSessions -= 1
                        shortTermObjects += 1  // Incr√©menter compteur objets court terme
                        
                        print("üóëÔ∏è Objet #\(trackedObject.trackingNumber) (\(trackedObject.label)) supprim√© directement (dur√©e de vie: \(String(format: "%.1f", trackedObject.lifetime))s < \(minimumLifetimeForMemory)s)")
                        continue
                    } else {
                        longTermObjects += 1  // Incr√©menter compteur objets long terme
                        print("üëª Objet #\(trackedObject.trackingNumber) (\(trackedObject.label)) gard√© en m√©moire (dur√©e de vie: \(String(format: "%.1f", trackedObject.lifetime))s)")
                    }
                }
                
                // V√©rifier expiration pour les objets en m√©moire
                if !trackedObject.isActive && trackedObject.isExpired(timeout: memoryTimeout) {
                    objectsToRemove.append(trackedObject.id)
                    activeTrackingSessions -= 1
                    
                    print("üóëÔ∏è Objet #\(trackedObject.trackingNumber) (\(trackedObject.label)) supprim√© apr√®s m√©moire (\(String(format: "%.1f", frameTime.timeIntervalSince(trackedObject.lastSeen)))s)")
                }
            }
        }
        
        // Supprimer les objets expir√©s
        trackedObjects.removeAll { objectsToRemove.contains($0.id) }
    }
    
    // MARK: - G√©n√©ration des r√©sultats
    
    private func generateEnrichedDetections() -> [(rect: CGRect, label: String, confidence: Float, distance: Float?, trackingInfo: (id: Int, color: UIColor, opacity: Double))] {
        var enrichedDetections: [(rect: CGRect, label: String, confidence: Float, distance: Float?, trackingInfo: (id: Int, color: UIColor, opacity: Double))] = []
        
        for trackedObject in trackedObjects {
            let trackingInfo = (
                id: trackedObject.trackingNumber,
                color: trackedObject.color,
                opacity: trackedObject.opacity
            )
            
            let enrichedDetection = (
                rect: trackedObject.lastRect,
                label: trackedObject.label,
                confidence: trackedObject.confidence,
                distance: trackedObject.distance,
                trackingInfo: trackingInfo
            )
            
            enrichedDetections.append(enrichedDetection)
        }
        
        return enrichedDetections
    }
    
    // MARK: - Helpers
    
    private func getNextColor() -> UIColor {
        let color = colorPalette[colorIndex % colorPalette.count]
        colorIndex += 1
        return color
    }
    
    private func getColorName(_ color: UIColor) -> String {
        // Approximation pour le debug
        if color == .systemRed { return "rouge" }
        if color == .systemBlue { return "bleu" }
        if color == .systemGreen { return "vert" }
        if color == .systemOrange { return "orange" }
        if color == .systemPurple { return "violet" }
        if color == .systemPink { return "rose" }
        if color == .systemYellow { return "jaune" }
        if color == .systemTeal { return "cyan" }
        return "couleur_\(colorIndex)"
    }
    
    // MARK: - Configuration avanc√©e
    
    // Statistiques avec objets court terme vs long terme
    private var shortTermObjects = 0  // Objets supprim√©s < 2s
    private var longTermObjects = 0   // Objets gard√©s en m√©moire
    
    // Configurer la dur√©e minimum pour la m√©moire (non expos√© pour l'instant)
    private func setMinimumLifetimeForMemory(_ duration: TimeInterval) {
        // Cette m√©thode pourrait √™tre expos√©e plus tard si besoin
    }
    
    // Obtenir les ratios de survie des objets
    func getSurvivalStats() -> String {
        let total = shortTermObjects + longTermObjects
        guard total > 0 else { return "Aucune donn√©e de survie" }
        
        let shortTermPercent = Float(shortTermObjects) / Float(total) * 100
        let longTermPercent = Float(longTermObjects) / Float(total) * 100
        
        var stats = "üìà Statistiques de survie:\n"
        stats += "   - Objets court terme (< \(minimumLifetimeForMemory)s): \(shortTermObjects) (\(String(format: "%.1f", shortTermPercent))%)\n"
        stats += "   - Objets long terme (‚â• \(minimumLifetimeForMemory)s): \(longTermObjects) (\(String(format: "%.1f", longTermPercent))%)"
        
        return stats
    }
    
    func getDetailedStats() -> String {
        let activeObjects = trackedObjects.filter { $0.isActive }
        let memoryObjects = trackedObjects.filter { !$0.isActive }
        
        var stats = getTrackingStats()
        
        // Ajouter les statistiques de survie
        if shortTermObjects + longTermObjects > 0 {
            stats += "\n\n" + getSurvivalStats()
        }
        
        stats += "\n\nüé® Objets actifs:"
        
        for obj in activeObjects {
            let lifetimeStr = String(format: "%.1f", obj.lifetime)
            let qualifier = obj.lifetime >= minimumLifetimeForMemory ? "‚úÖ" : "‚è≥"
            stats += "\n   - #\(obj.trackingNumber) \(obj.label) \(qualifier) (dur√©e: \(lifetimeStr)s)"
        }
        
        if !memoryObjects.isEmpty {
            stats += "\n\nüëª Objets en m√©moire:"
            for obj in memoryObjects {
                let lostTime = String(format: "%.1f", Date().timeIntervalSince(obj.lastSeen))
                let lifetimeStr = String(format: "%.1f", obj.lifetime)
                stats += "\n   - #\(obj.trackingNumber) \(obj.label) (v√©cu: \(lifetimeStr)s, perdu: \(lostTime)s)"
            }
        }
        
        return stats
    }
    
    func resetStats() {
        totalObjectsTracked = 0
        activeTrackingSessions = 0
        shortTermObjects = 0
        longTermObjects = 0
        print("üìä Statistiques de tracking r√©initialis√©es")
    }
}
